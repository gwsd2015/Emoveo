use strict;
use warnings;
use Lingua::EN::StopWords qw(%StopWords);
use Lingua::Stem::En;
use List::Util qw(sum);
use Text::Summarize::En;
use Data::Dump qw(dump);
use Algorithm::MarkovChain;
use Path::Class;
use Lingua::EN::Fathom;
use utf8;
use File::Slurp;

my $input = "C:/Perl/leak.txt";
open	(INPUT, $input)		or die;

my $output = "C:/Perl/leaksummary.txt";
open	(OUTPUT, '>'.$output)	or die;	

while(	<INPUT>	){

	tr/A-Z/a-z/;
	
	tr/.,:;!&?"'(){}\-\$\+\=\{\}\@\/\*\>\<//d;

	s/[0-9]//g;
	
	my @paragraph = split(/\n/, $_);

	print OUTPUT "$_" for @paragraph;

	foreach my $para (@paragraph){

		my $summarizerEn = Text::Summarize::En->new();
	
		my $Parsed = $para;

		my $summary = $summarizerEn->getSummaryUsingSumbasic(listOfText => [$Parsed]);
	
		dump $summarizerEn->getSummaryUsingSumbasic(listOfText => [$Parsed]);

		print $summarizerEn;

		my $buffer = "";

		my $size = (length($Parsed))*0.80;

		my @sentence_list = map { $_->[0] } @{$summary->{idScore}};

		my @sentence_content;

		foreach my $tagged_sentence (	@{	$summary->{listOfStemmedTaggedSentences	}	} ) {

			my @t;
			
			foreach my $element ( @{ $tagged_sentence } ) {
			
			my $Parsed = @$element[1];

				$Parsed =~ s/\t/ /;

				$Parsed =~ s/\n/ /;

				$Parsed =~ s/\s{2,}/ /;

				push @t, $Parsed;

			}

			push @sentence_content, (join "", map	{	s/ +/ /gr	} @t);		

		}


		while (	length($buffer) < $size	){

			$buffer .= join "\n", $sentence_content[(shift @sentence_list)];

		}

		print OUTPUT $buffer."\n";	
	
	}	
	
}


close INPUT;
close OUTPUT;


my $text = read_file(	'leak.txt'	);
my $text2 = read_file(	'leaksummary.txt'	);

print comparisontest (
	$text,
	$text2,	
);






sub sentence2hash	{

	my $words	= words(lc(shift));

	my $stemmed	=   Lingua::Stem::En::stem({

		-words	=> [	grep	{	!$StopWords{$_}	} @$words	]
	
	});

	return	{	map	{$_ => 1}	grep $_, @$stemmed	};

}




sub comparisontest	{
	my	(	$h1, $h2	) = map {	sentence2hash($_) } @_;
        
	my %composite = %$h1;
        
	$composite{	$_	}++ for keys %$h2;
        
	return 100*(sum	(	values %composite	)/keys %composite)/2;
    }
